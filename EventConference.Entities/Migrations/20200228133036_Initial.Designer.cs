// <auto-generated />
using System;
using EventConference.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventConference.Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20200228133036_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventConference.Entities.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountryId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 495, DateTimeKind.Local).AddTicks(9235));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 504, DateTimeKind.Local).AddTicks(2089));

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Timor-Leste",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Indonesia",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Portugal",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Zealand",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EventConference.Entities.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 537, DateTimeKind.Local).AddTicks(1760));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndorsedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderBanner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerVideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 537, DateTimeKind.Local).AddTicks(2694));

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("When")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Active")
                        .IsUnique();

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d021a8e6-14c7-4aaa-88f9-ff7d33043a06"),
                            About = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Active = true,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 13, 30, 34, 538, DateTimeKind.Utc).AddTicks(3786),
                            Description = "",
                            EndorsedBy = "LOREM IPSUM",
                            Latitude = "-8.560096",
                            Longitude = "125.579218",
                            OrganizedBy = "LOREM IPSUM",
                            Quote = "“There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...” - <span>Lorem Ipsum.</span>",
                            SubTitle = "Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...",
                            Summary = "Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...",
                            Title = "“There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...” - <span>Lorem Ipsum.</span>",
                            TrailerVideoLink = "https://www.youtube.com/watch?v=jDDaplaOz7Q",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Díli Convention Center, Mercado Lama, Caicoli, Timor-Leste",
                            When = "Monday to Wednesday<br>10-12 December"
                        },
                        new
                        {
                            Id = new Guid("4e97c256-a162-44c6-b79c-c950c15cfe5e"),
                            About = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo",
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 13, 30, 34, 541, DateTimeKind.Utc).AddTicks(1336),
                            Description = "",
                            EndorsedBy = "GERASAUN OSSO-HUNA",
                            Latitude = "-8.656648",
                            Longitude = "126.625446",
                            OrganizedBy = "OSSO-HUNA ANAN",
                            Quote = "“Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...” - <span>Lorem Ipsum.</span>",
                            SubTitle = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Summary = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium",
                            Title = "“Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...” - <span>Lorem Ipsum.</span>",
                            TrailerVideoLink = "https://www.youtube.com/watch?v=jDDaplaOz7Q",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Baguia Convention Center, Osso-Huna, Baguia, Timor-Leste",
                            When = "Wednesday to Friday<br>10-12 December"
                        });
                });

            modelBuilder.Entity("EventConference.Entities.Models.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FaqId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 552, DateTimeKind.Local).AddTicks(787));

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 552, DateTimeKind.Local).AddTicks(2194));

                    b.HasKey("Id");

                    b.ToTable("Faqs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "Aut sequi aliquam deleniti. Dolore rerum aliquid maiores velit laudantium nam. Perspiciatis dignissimos culpa non et natus laboriosam. Quisquam eos eveniet et facere.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Question = "Unde a ut eligendi dolor ducimus.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Est et occaecati asperiores natus. Quia aut velit omnis. Fugiat necessitatibus natus quo ratione in voluptas minus quam. Quia et quam autem est aut et.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Question = "Sint deleniti dolorem enim ipsum.	",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Answer = "Corrupti qui ad dolorem quos quod quaerat. Dolorem adipisci in sint doloremque eum ut ut. Fuga eos quod qui optio illum. Et totam officiis culpa.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Question = "Provident sit tempore blanditiis et aut est.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Answer = "Occaecati doloremque aut nulla ut ut repudiandae. Quam sed saepe omnis sit.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Question = "Dolorem dolores iusto accusamus qui illum qui ipsum.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Answer = "Est sit sint modi fugit a voluptate. Incidunt qui impedit blanditiis sint animi nobis. Esse mollitia autem sunt quia aliquid.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Question = "Voluptatem culpa odit repudiandae at omnis magni.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Answer = "Enim qui fuga aliquid et recusandae porro ipsam. Praesentium molestiae qui nisi illum praesentium quia accusamus dolores. Ut aut sed magnam sit dolorum dolores nesciunt.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Question = "Occaecati a et sapiente et veritatis sunt ea.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EventConference.Entities.Models.Gallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 557, DateTimeKind.Local).AddTicks(4687));

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 557, DateTimeKind.Local).AddTicks(5658));

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 559, DateTimeKind.Local).AddTicks(3278));

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 559, DateTimeKind.Local).AddTicks(4322));

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 575, DateTimeKind.Local).AddTicks(6040));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 575, DateTimeKind.Local).AddTicks(7337));

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 614, DateTimeKind.Local).AddTicks(9461));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpeakerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 615, DateTimeKind.Local).AddTicks(755));

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1db3f940-0b1b-44c0-80d2-af19ed7ab770"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 648, DateTimeKind.Local).AddTicks(8572),
                            DayNumber = 1,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 01",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f19c989b-2bd2-4ca2-8b70-037ffd7e1676"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(471),
                            DayNumber = 1,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 02",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f61805d8-67bd-4872-a2a7-29e391fd4170"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(537),
                            DayNumber = 1,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 03",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bd781183-83eb-4f39-bcda-486d4fd64062"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(572),
                            DayNumber = 1,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 04",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f8c2fa68-77d9-4e51-9c42-2865c672e7c7"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(604),
                            DayNumber = 1,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 05",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("641def96-632c-432a-8415-e46df3807349"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(649),
                            DayNumber = 1,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 05",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("91ef1872-97f9-42b9-bf85-3c622d08f273"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(683),
                            DayNumber = 2,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 01",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("39e99574-dca6-48c0-8ca1-f93126b0d447"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(769),
                            DayNumber = 2,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 02",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("45be8f78-40ea-4253-a330-9aaca9a2314f"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(799),
                            DayNumber = 2,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 03",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3bab72d5-faef-4890-acb4-4caacc5d4e16"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(834),
                            DayNumber = 2,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 04",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cf04a340-4574-4c37-bf6e-59d42162c4aa"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(865),
                            DayNumber = 2,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 05",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("25b314c7-0d41-4824-a836-ac6e52605e41"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(894),
                            DayNumber = 2,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 05",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5edcd77-ce0a-4f0f-863a-68cf93e27acd"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(924),
                            DayNumber = 3,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 01",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fc05b41d-fb4a-473e-aa5e-2721a16db1ff"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(954),
                            DayNumber = 3,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 02",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3f28760e-41d6-4cf9-b907-0f7adb787488"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(983),
                            DayNumber = 3,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 03",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3129cb2b-1e9a-4994-b2d0-2d849779e7ab"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(1038),
                            DayNumber = 3,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 04",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2f39764f-3482-4950-97ec-db5a601b3d71"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(1116),
                            DayNumber = 3,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 05",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eeadf9a5-97d7-4a9c-9d42-4d1fee4cdb69"),
                            Abstract = "Abstract of session 01",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2020, 2, 28, 22, 30, 34, 649, DateTimeKind.Local).AddTicks(1152),
                            DayNumber = 3,
                            EndTime = new DateTimeOffset(new DateTime(2020, 10, 1, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(2020, 10, 1, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 9, 0, 0, 0)),
                            Title = "Session 05",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EventConference.Entities.Models.SessionParticipant", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 607, DateTimeKind.Local).AddTicks(1652));

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("SessionParticipant");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 545, DateTimeKind.Local).AddTicks(3607));

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 545, DateTimeKind.Local).AddTicks(4614));

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90939d8c-0bb2-484f-9c8d-67c6036e31a9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Site",
                            Key = "site_name",
                            Name = "Site Name",
                            Type = "text",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "LOREM-IPSUM"
                        },
                        new
                        {
                            Id = new Guid("4c4108de-b0c4-45e4-9ed8-0c56fa09757d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Site",
                            Key = "site_header_image",
                            Name = "Site Background Header",
                            Type = "file",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b93cf308-62fa-479d-9d9a-7c2c35d53257"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Contact",
                            Key = "contact_address",
                            Name = "Contact address",
                            Type = "text",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "Rua Delta 1, Aimutin Comoro, Dili. Timor-Leste"
                        },
                        new
                        {
                            Id = new Guid("67fe7cdf-0460-4bca-a829-46a3acbde541"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Contact",
                            Key = "contact_phone",
                            Name = "Contact phone",
                            Type = "text",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "+(670) 331 017 9"
                        },
                        new
                        {
                            Id = new Guid("a70ce964-7419-4c4f-9a6e-b9e06c5f37b0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Contact",
                            Key = "contact_email",
                            Name = "Contact email",
                            Type = "email",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "helder@chebre.net"
                        },
                        new
                        {
                            Id = new Guid("ae98a0e5-df67-4a7d-ac74-8ac6b78e2e00"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Footer",
                            Key = "footer_description",
                            Name = "Footer Description",
                            Type = "textarea",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "In alias aperiam. Placeat tempore facere. Officiis voluptate ipsam vel eveniet est dolor et totam porro. Perspiciatis ad omnis fugit molestiae recusandae possimus. Aut consectetur id quis. In inventore consequatur ad voluptate cupiditate debitis accusamus repellat cumque.	"
                        },
                        new
                        {
                            Id = new Guid("3785682b-314b-4bc2-9a6e-93e4b05da6d8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Footer",
                            Key = "twitter",
                            Name = "Twitter",
                            Type = "text",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "#!"
                        },
                        new
                        {
                            Id = new Guid("fb7d9447-fb2c-4b35-8786-ff62bcd3d97f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Footer",
                            Key = "facebook",
                            Name = "Facebook",
                            Type = "text",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "#!"
                        },
                        new
                        {
                            Id = new Guid("250f5da5-38fa-40af-ad50-e1143650568b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Footer",
                            Key = "instagram",
                            Name = "Instagram",
                            Type = "text",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "#!"
                        },
                        new
                        {
                            Id = new Guid("d15cd319-e151-4f79-a762-e5c273817206"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Group = "Footer",
                            Key = "linkedin",
                            Name = "LinkedIn",
                            Type = "text",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "#!"
                        });
                });

            modelBuilder.Entity("EventConference.Entities.Models.Speaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpeakerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 532, DateTimeKind.Local).AddTicks(767));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 532, DateTimeKind.Local).AddTicks(2122));

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EventId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Speakers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38245951-eded-43f5-b03c-c6dfd395475a"),
                            Avatar = "/img/goku.png",
                            CountryId = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Speaker 1",
                            Facebook = "#!",
                            FullDescription = "FullDescription of Speaker 1",
                            LinkedIn = "#!",
                            Name = "Speaker 1",
                            Twitter = "#!",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "#!"
                        },
                        new
                        {
                            Id = new Guid("c68f084d-f011-402c-9916-8275b2a265c6"),
                            Avatar = "/img/goku.png",
                            CountryId = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Speaker 2",
                            Facebook = "#!",
                            FullDescription = "FullDescription of Speaker 2",
                            LinkedIn = "#!",
                            Name = "Speaker 2",
                            Twitter = "#!",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "#!"
                        },
                        new
                        {
                            Id = new Guid("c4978272-223a-409a-9885-1038cdaa52b1"),
                            Avatar = "/img/goku.png",
                            CountryId = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Speaker 3",
                            Facebook = "#!",
                            FullDescription = "FullDescription of Speaker 3",
                            LinkedIn = "#!",
                            Name = "Speaker 3",
                            Twitter = "#!",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "#!"
                        },
                        new
                        {
                            Id = new Guid("1a3952ef-4844-41ff-94c8-f3d3873d652c"),
                            Avatar = "/img/goku.png",
                            CountryId = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Speaker 4",
                            Facebook = "#!",
                            FullDescription = "FullDescription of Speaker 4",
                            LinkedIn = "#!",
                            Name = "Speaker 4",
                            Twitter = "#!",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "#!"
                        },
                        new
                        {
                            Id = new Guid("721b883b-0242-4525-ae82-bccefb538aed"),
                            Avatar = "/img/goku.png",
                            CountryId = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Speaker 5",
                            Facebook = "#!",
                            FullDescription = "FullDescription of Speaker 5",
                            LinkedIn = "#!",
                            Name = "Speaker 5",
                            Twitter = "#!",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "#!"
                        });
                });

            modelBuilder.Entity("EventConference.Entities.Models.Sponsor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SponsorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 548, DateTimeKind.Local).AddTicks(7873));

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 548, DateTimeKind.Local).AddTicks(9375));

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VenueId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 578, DateTimeKind.Local).AddTicks(8574));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 2, 28, 22, 30, 34, 579, DateTimeKind.Local).AddTicks(156));

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Mercado Lama, Caicoli, Timor-Leste",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Iste nobis eum sapiente sunt enim dolores labore accusantium autem. Cumque beatae ipsam. Est quae sit qui voluptatem corporis velit. Qui maxime accusamus possimus. Consequatur sequi et ea suscipit enim nesciunt quia velit.",
                            Latitude = "-8.560096",
                            Longitude = "125.579218",
                            Name = "Díli Convention Center",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EventConference.Entities.Models.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgeRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AgreeTermAndCondigion")
                        .HasColumnType("bit");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasVolunteered")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EventId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Gallery", b =>
                {
                    b.HasOne("EventConference.Entities.Models.Event", "Event")
                        .WithMany("Galleries")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Media", b =>
                {
                    b.HasOne("EventConference.Entities.Models.Gallery", "Gallery")
                        .WithMany("Medias")
                        .HasForeignKey("GalleryId");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Participant", b =>
                {
                    b.HasOne("EventConference.Entities.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventConference.Entities.Models.Session", b =>
                {
                    b.HasOne("EventConference.Entities.Models.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId");

                    b.HasOne("EventConference.Entities.Models.Speaker", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId");
                });

            modelBuilder.Entity("EventConference.Entities.Models.SessionParticipant", b =>
                {
                    b.HasOne("EventConference.Entities.Models.Participant", "Participant")
                        .WithMany("SessionParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventConference.Entities.Models.Session", "Session")
                        .WithMany("SessionParticipants")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventConference.Entities.Models.Speaker", b =>
                {
                    b.HasOne("EventConference.Entities.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventConference.Entities.Models.Event", "Event")
                        .WithMany("Speakers")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Sponsor", b =>
                {
                    b.HasOne("EventConference.Entities.Models.Event", "Event")
                        .WithMany("Sponsors")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("EventConference.Entities.Models.Volunteer", b =>
                {
                    b.HasOne("EventConference.Entities.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventConference.Entities.Models.Event", "Event")
                        .WithMany("Volunteers")
                        .HasForeignKey("EventId");
                });
#pragma warning restore 612, 618
        }
    }
}
